"""
This type stub file was generated by pyright.
"""

from . import utils

@utils.check_for_none
@utils.check_for_equivalence
@utils.check_empty_string
def ratio(s1, s2): # -> int:
    ...

@utils.check_for_none
@utils.check_for_equivalence
@utils.check_empty_string
def partial_ratio(s1, s2): # -> int:
    """"Return the ratio of the most similar substring
    as a number between 0 and 100."""
    ...

def token_sort_ratio(s1, s2, force_ascii=..., full_process=...): # -> int:
    """Return a measure of the sequences' similarity between 0 and 100
    but sorting the token before comparing.
    """
    ...

def partial_token_sort_ratio(s1, s2, force_ascii=..., full_process=...): # -> int:
    """Return the ratio of the most similar substring as a number between
    0 and 100 but sorting the token before comparing.
    """
    ...

def token_set_ratio(s1, s2, force_ascii=..., full_process=...):
    ...

def partial_token_set_ratio(s1, s2, force_ascii=..., full_process=...):
    ...

def QRatio(s1, s2, force_ascii=..., full_process=...): # -> int:
    """
    Quick ratio comparison between two strings.

    Runs full_process from utils on both strings
    Short circuits if either of the strings is empty after processing.

    :param s1:
    :param s2:
    :param force_ascii: Allow only ASCII characters (Default: True)
    :full_process: Process inputs, used here to avoid double processing in extract functions (Default: True)
    :return: similarity ratio
    """
    ...

def UQRatio(s1, s2, full_process=...): # -> int:
    """
    Unicode quick ratio

    Calls QRatio with force_ascii set to False

    :param s1:
    :param s2:
    :return: similarity ratio
    """
    ...

def WRatio(s1, s2, force_ascii=..., full_process=...):
    """
    Return a measure of the sequences' similarity between 0 and 100, using different algorithms.

    **Steps in the order they occur**

    #. Run full_process from utils on both strings
    #. Short circuit if this makes either string empty
    #. Take the ratio of the two processed strings (fuzz.ratio)
    #. Run checks to compare the length of the strings
        * If one of the strings is more than 1.5 times as long as the other
          use partial_ratio comparisons - scale partial results by 0.9
          (this makes sure only full results can return 100)
        * If one of the strings is over 8 times as long as the other
          instead scale by 0.6

    #. Run the other ratio functions
        * if using partial ratio functions call partial_ratio,
          partial_token_sort_ratio and partial_token_set_ratio
          scale all of these by the ratio based on length
        * otherwise call token_sort_ratio and token_set_ratio
        * all token based comparisons are scaled by 0.95
          (on top of any partial scalars)

    #. Take the highest value from these results
       round it and return it as an integer.

    :param s1:
    :param s2:
    :param force_ascii: Allow only ascii characters
    :type force_ascii: bool
    :full_process: Process inputs, used here to avoid double processing in extract functions (Default: True)
    :return:
    """
    ...

def UWRatio(s1, s2, full_process=...):
    """Return a measure of the sequences' similarity between 0 and 100,
    using different algorithms. Same as WRatio but preserving unicode.
    """
    ...

